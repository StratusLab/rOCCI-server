{"tagline":"OCCI service provider","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"rOCCI-server","google":"","body":"rOCCI Server - A Ruby OCCI Server\r\n=============================\r\n\r\n[![Build Status](https://secure.travis-ci.org/gwdg/rOCCI-server.png)](http://travis-ci.org/gwdg/rOCCI-server)\r\n\r\nIf you want to use rOCCI-server in a production environment, follow the production instructions for installation and\r\nconfiguration, otherwise follow the developer instructions for installation and configuration.\r\n\r\nRequirements\r\n------------\r\n\r\nThe following setup is recommended\r\n\r\n* usage of the Ruby Version Manger (RVM)\r\n* Ruby >= 1.9.3\r\n* Bundler gem installed (use ```gem install bundler```)\r\n\r\nInstallation\r\n------------\r\n\r\n### Production\r\n\r\nDownload the latest version from https://github.com/gwdg/rOCCI-server/downloads\r\n\r\nExtract file\r\n\r\n    tar xzf rOCCI-server-*.tar.bz\r\n    unzip rOCCI-server-*.zip\r\n\r\nInstall dependencies\r\n\r\n    bundle install --deployment\r\n\r\n### Developer\r\n\r\nCheckout latest version from GIT:\r\n\r\n    git clone git://github.com/gwdg/rOCCI-server.git\r\n\r\nChange to rOCCI folder\r\n\r\n    cd rOCCI-server\r\n\r\nInstall dependencies\r\n\r\n    bundle install\r\n\r\nConfiguration\r\n-------------\r\n\r\nrOCCI-server comes with different backends. Check the `etc` folder for available backends (e.g. dummy, opennebula, ...).\r\nEach backend has an example configuration in a file with the name of the backend and the extension `.json`. Copy one of\r\nthose files (e.g. `etc/backend/dummy/dummy.json`) to `etc/backend/default.json` and adapt its content to your setting.\r\n\r\nTo configure the behaviour of compute, network and storage resource creation, edit the backend specific extensions of\r\nthe OCCI model at `etc/backend/$BACKEND/model` (e.g. `etc/backend/dummy/model` for the dummy backend).\r\n\r\nTo change the predefined resource or OS templates, you can adapt the existing templates in `etc/backend/$BACKEND/templates`\r\nor add new templates. If resource or OS templates are already registered in the backend, they will be automatically\r\ndiscovered by rOCCI-server.\r\n\r\n### OpenNebula backend\r\n\r\nIf you want to change the actual deployment within OpenNebula you can change the OpenNebula templates in the files in\r\n`etc/backend/opennebula/one_templates`.\r\n\r\nTo configure OpenNebula resource templates (e.g. small, medium, large, ...) change the files in\r\netc/backend/opennebula/templates .\r\n\r\nFor the OpenNebula backend a special server user is required in OpenNebula. To create a user named occi run the\r\nfollowing command in your OpenNebula environment (replace $RANDOM with a secure password!):\r\n\r\n     oneuser create occi $RANDOM --driver server_cipher\r\n\r\nAfter copying `etc/backend/opennebula/opennebula.json` to `etc/backend/default.json` you have to adapt the admin and\r\npassword attributes in that file to the ones you chose during the user creation.\r\n\r\nIf you want to use X.509 authentication for your users, you need to create the users in OpenNebula with the X.509\r\ndriver. For a user named `doe` the command may look like this\r\n\r\n    oneuser create doe \"/C=US/O=Doe Foundation/CN=John Doe\" --driver x509\r\n\r\nFor more information have a look at the\r\n[OpenNebula Documentation on x509 Authentication](http://opennebula.org/documentation:rel3.6:x509_auth)\r\n\r\nUsage\r\n-----\r\n\r\nrOCCI-server is using passenger to be deployed into a webserver.\r\n\r\n#### Passenger\r\n\r\nrOCCI-server will work with the default passenger setup even though this setup is not recommended for production. To use\r\nadvanced features such as X.509 authentication, you need to set up passenger with a separate Nginx or Apache webserver.\r\nLuckily, this is pretty easy. Detailed instructions can be found in the\r\n[Passenger Documentation](http://www.modrails.com/documentation.html).\r\n\r\nTo use the standalone passenger with nginx run the following command (and maybe follow the installation steps) and\r\nrOCCI-server is running\r\n\r\n    bundle exec passenger start\r\n\r\nTo install rOCCI-server with RVM and either Nginx or Apache follow the steps below.\r\n\r\n#### RVM\r\n\r\nDetailed information on setting up and using RVM can be found on the [RVM website](http://rvm.io/).\r\n\r\nInstall RVM as sudo user (e.g. not root)\r\n\r\n    curl -L https://get.rvm.io | sudo bash -s stable\r\n\r\nSelect a user as a manager, and add him to rvm group - he will be responsible for installing new rubies.\r\n\r\n    usermod -a -G rvm $USER\r\n\r\nIf you intend to manage rOCCI-server from a different user account, you need to run the following command and logout\r\nand login again\r\n\r\n    rvm user gemsets\r\n\r\nSetup RVM for rOCCI-server (change the ruby version to your favorite one)\r\n\r\n    cd rOCCI-server\r\n    rvm install ruby-1.9.3\r\n    rvm --rvmrc --create ruby-1.9.3@rOCCI-server\r\n\r\n#### Nginx\r\n\r\nNote: If you intend to use several CAs for client certificate validation, you should use Apache as Nginx currently only\r\nallows to configure one CA file to use for client certificate validation.\r\n\r\nLet passenger guide you through installing and or configuring Nginx (for apache see below) for you\r\n\r\n    bundle exec rvmsudo passenger-install-nginx-module\r\n\r\nEdit the Nginx configuration (e.g. `/opt/nginx/conf/nginx.conf`) and insert a new `server` entry for the rOCCI server.\r\nTo use SSL you need a valid server certificate and for client verification you need a file containing all CAs you want\r\nto use for verification (there currently seems to be no way to specify multiple CA files for verification). The entry\r\nshould look like this (adapt to your settings, especially $USER! and server_name):\r\n\r\n        server {\r\n            # change to the server name rOCCI-server should be accessible from\r\n            server_name  localhost;\r\n            # change to the port rOCCI-server should listen on\r\n            listen 443;\r\n            # important, this needs to point to the public folder of your rOCCI-server\r\n            root /home/$USER/rOCCI-server/public;\r\n\r\n            ssl on;\r\n            # this should point to your server host certificate\r\n            ssl_certificate /etc/ssl/certs/server.crt;\r\n            # this should point to your server host key\r\n            ssl_certificate_key /etc/ssl/private/server.key;\r\n            # this should point to the Root CAs which should be used for client verification\r\n            ssl_client_certificate /etc/ssl/certs/ca.pem;\r\n            # if you have multiple CAs in the file above, you may need to increase the verify depht\r\n            ssl_verify_depth 10;\r\n            # set to optional, this tells nginx to attempt to verify SSL certificates if provided\r\n            ssl_verify_client optional;\r\n\r\n            passenger_enabled on;\r\n            # pass the subject of the client certificate to passenger\r\n            passenger_set_cgi_param SSL_CLIENT_S_DN $ssl_client_s_dn;\r\n        }\r\n\r\nYou have to start/restart Nginx before you can use rOCCI-server!\r\n\r\n#### Apache\r\n\r\nLet passenger guide you through installing and or configuring Apache for you\r\n\r\n    bundle exec rvmsudo passenger-install-apache2-module\r\n\r\nCreate a new VirtualHost in the sites-available directory of Apache (e.g. in `/etc/apache2/sites-available/occi-ssl`)\r\nwith the following content (adapt to your settings, especially $USER! and ServerName):\r\n\r\n    <VirtualHost *:443>\r\n        SSLEngine on\r\n        # for security reasons you may restrict the SSL protocol, but some clients may fail if SSLv2 is not supported\r\n        SSLProtocol all\r\n        # this should point to your server host certificate\r\n        SSLCertificateFile /etc/ssl/certs/server.crt\r\n        # this should point to your server host key\r\n        SSLCertificateKeyFile /etc/ssl/private/server.key\r\n        # directory containing the Root CA certificates and their hashes\r\n        SSLCACertificatePath /etc/ssl/certs\r\n        # set to optional, this tells Apache to attempt to verify SSL certificates if provided\r\n        SSLVerifyClient optional\r\n        # if you have multiple CAs in the file above, you may need to increase the verify depht\r\n        SSLVerifyDepth 10\r\n        # enable passing of SSL variables to passenger\r\n        SSLOptions +StdEnvVars\r\n\r\n        ServerName localhost\r\n        # important, this needs to point to the public folder of your rOCCI-server\r\n        DocumentRoot /home/$USER/rOCCI-server/public\r\n        <Directory /home/$USER/rOCCI-server/public>\r\n            Allow from all\r\n            Options -MultiViews\r\n        </Directory>\r\n    </VirtualHost>\r\n\r\nYou have to start/restart Apache before you can use rOCCI-server!\r\n\r\nUpdating\r\n--------\r\n\r\nIf you checked out rOCCI-server from GIT, then you can pull the latest version or a tagged version, update all required\r\nruby gems using bundler and restart the server by touching the file tmp/restart.txt:\r\n\r\n    cd rOCCI-server\r\n    git pull\r\n    bundle install --deployment\r\n    mkdir tmp\r\n    touch tmp/restart.txt\r\n\r\nIf you have downloaded a new milestone from https://github.com/gwdg/rOCCI-server/downloads the steps are similar:\r\n\r\n    tar xzf rOCCI-server-X.tar.bz\r\n    cp rOCCI-server-X rOCCI-server\r\n    cd rOCCI-server\r\n    bundle install --deployment\r\n    mkdir tmp\r\n    touch tmp/restart.txt\r\n\r\nTesting\r\n-------\r\n\r\nTo run the rspec scenario test run\r\n\r\n    bundle exec rspec\r\n\r\nFor manual testing it is recommended to use the OCCI client supplied as part of the rOCCI gem. For more information\r\nvisit https://github.com/gwdg/rOCCI#client\r\n\r\nDevelopment\r\n-----------\r\n\r\n### Code Documentation\r\n\r\n[Code Documentation for rOCCI by YARD](http://rubydoc.info/github/gwdg/rOCCI-server/)\r\n\r\n### Continuous integration\r\n\r\n[Continuous integration for rOCCI by Travis-CI](http://travis-ci.org/gwdg/rOCCI-server/)\r\n\r\n### Contribute\r\n\r\n1. Fork it.\r\n2. Create a branch (git checkout -b my_markup)\r\n3. Commit your changes (git commit -am \"My changes\")\r\n4. Push to the branch (git push origin my_markup)\r\n5. [Use GitHubs Pull Requests](https://help.github.com/articles/using-pull-requests/) to submit the code for review"}